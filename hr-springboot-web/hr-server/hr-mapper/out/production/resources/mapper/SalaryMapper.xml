<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="fun.mizhuo.hrserver.mapper.SalaryMapper">
  <resultMap id="BaseResultMap" type="fun.mizhuo.hrserver.model.Salary">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="basicSalary" jdbcType="INTEGER" property="basicSalary" />
    <result column="bonus" jdbcType="INTEGER" property="bonus" />
    <result column="lunchSalary" jdbcType="INTEGER" property="lunchSalary" />
    <result column="trafficSalary" jdbcType="INTEGER" property="trafficSalary" />
    <result column="allSalary" jdbcType="INTEGER" property="allSalary" />
    <result column="pensionBase" jdbcType="INTEGER" property="pensionBase" />
    <result column="pensionPer" jdbcType="REAL" property="pensionPer" />
    <result column="createDate" jdbcType="TIMESTAMP" property="createDate" />
    <result column="medicalBase" jdbcType="INTEGER" property="medicalBase" />
    <result column="medicalPer" jdbcType="REAL" property="medicalPer" />
    <result column="accumulationFundBase" jdbcType="INTEGER" property="accumulationFundBase" />
    <result column="accumulationFundPer" jdbcType="REAL" property="accumulationFundPer" />
    <result column="name" jdbcType="VARCHAR" property="name" />
  </resultMap>

  <insert id="addSalary" parameterType="fun.mizhuo.hrserver.model.Salary">
      insert into salary
      <trim prefix="(" suffix=")" suffixOverrides=",">
        <if test="id != null">
          id,
        </if>
        <if test="basicSalary != null">
          basicSalary,
        </if>
        <if test="bonus != null">
          bonus,
        </if>
        <if test="lunchSalary != null">
          lunchSalary,
        </if>
        <if test="trafficSalary != null">
          trafficSalary,
        </if>
        <if test="allSalary != null">
          allSalary,
        </if>
        <if test="pensionBase != null">
          pensionBase,
        </if>
        <if test="pensionPer != null">
          pensionPer,
        </if>
        <if test="createDate != null">
          createDate,
        </if>
        <if test="medicalBase != null">
          medicalBase,
        </if>
        <if test="medicalPer != null">
          medicalPer,
        </if>
        <if test="accumulationFundBase != null">
          accumulationFundBase,
        </if>
        <if test="accumulationFundPer != null">
          accumulationFundPer,
        </if>
        <if test="name != null">
          name,
        </if>
      </trim>
      <trim prefix="values (" suffix=")" suffixOverrides=",">
        <if test="id != null">
          #{id,jdbcType=INTEGER},
        </if>
        <if test="basicSalary != null">
          #{basicSalary,jdbcType=INTEGER},
        </if>
        <if test="bonus != null">
          #{bonus,jdbcType=INTEGER},
        </if>
        <if test="lunchSalary != null">
          #{lunchSalary,jdbcType=INTEGER},
        </if>
        <if test="trafficSalary != null">
          #{trafficSalary,jdbcType=INTEGER},
        </if>
        <if test="allSalary != null">
          #{allSalary,jdbcType=INTEGER},
        </if>
        <if test="pensionBase != null">
          #{pensionBase,jdbcType=INTEGER},
        </if>
        <if test="pensionPer != null">
          #{pensionPer,jdbcType=REAL},
        </if>
        <if test="createDate != null">
          #{createDate,jdbcType=TIMESTAMP},
        </if>
        <if test="medicalBase != null">
          #{medicalBase,jdbcType=INTEGER},
        </if>
        <if test="medicalPer != null">
          #{medicalPer,jdbcType=REAL},
        </if>
        <if test="accumulationFundBase != null">
          #{accumulationFundBase,jdbcType=INTEGER},
        </if>
        <if test="accumulationFundPer != null">
          #{accumulationFundPer,jdbcType=REAL},
        </if>
        <if test="name != null">
          #{name,jdbcType=VARCHAR},
        </if>
      </trim>
    </insert>

  <update id="updateSalary" parameterType="fun.mizhuo.hrserver.model.Salary">
      update salary
      <set>
        <if test="basicSalary != null">
          basicSalary = #{basicSalary,jdbcType=INTEGER},
        </if>
        <if test="bonus != null">
          bonus = #{bonus,jdbcType=INTEGER},
        </if>
        <if test="lunchSalary != null">
          lunchSalary = #{lunchSalary,jdbcType=INTEGER},
        </if>
        <if test="trafficSalary != null">
          trafficSalary = #{trafficSalary,jdbcType=INTEGER},
        </if>
        <if test="allSalary != null">
          allSalary = #{allSalary,jdbcType=INTEGER},
        </if>
        <if test="pensionBase != null">
          pensionBase = #{pensionBase,jdbcType=INTEGER},
        </if>
        <if test="pensionPer != null">
          pensionPer = #{pensionPer,jdbcType=REAL},
        </if>
        <if test="createDate != null">
          createDate = #{createDate,jdbcType=TIMESTAMP},
        </if>
        <if test="medicalBase != null">
          medicalBase = #{medicalBase,jdbcType=INTEGER},
        </if>
        <if test="medicalPer != null">
          medicalPer = #{medicalPer,jdbcType=REAL},
        </if>
        <if test="accumulationFundBase != null">
          accumulationFundBase = #{accumulationFundBase,jdbcType=INTEGER},
        </if>
        <if test="accumulationFundPer != null">
          accumulationFundPer = #{accumulationFundPer,jdbcType=REAL},
        </if>
        <if test="name != null">
          name = #{name,jdbcType=VARCHAR},
        </if>
      </set>
      where id = #{id,jdbcType=INTEGER}
    </update>

  <delete id="deleteSalaryById">
    delete from salary where id = #{id}
  </delete>

  <delete id="deleteMoreSalaries" parameterType="list">
    delete from salary where id in (
      <foreach collection="list" item="salary" separator=",">
        #{salary.id}
      </foreach>
    )
  </delete>

  <select id="getAllSalaries" resultMap="BaseResultMap">
        SELECT
            id,basicSalary,bonus,
            lunchSalary,trafficSalary,allSalary,
            pensionBase,pensionPer,createDate,
            medicalBase,medicalPer,accumulationFundBase,
            accumulationFundPer,name
        FROM salary
  </select>

</mapper>